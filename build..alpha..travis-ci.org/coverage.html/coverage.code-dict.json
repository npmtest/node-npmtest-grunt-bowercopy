{"/home/travis/build/npmtest/node-npmtest-grunt-bowercopy/test.js":"/* istanbul instrument in package npmtest_grunt_bowercopy */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireExampleJsFromReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - post-init\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - post-init\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-grunt-bowercopy/lib.npmtest_grunt_bowercopy.js":"/* istanbul instrument in package npmtest_grunt_bowercopy */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_grunt_bowercopy = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_grunt_bowercopy = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-grunt-bowercopy/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-grunt-bowercopy && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_grunt_bowercopy */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_grunt_bowercopy\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // post-init\n    // run browser js-env code - post-init\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_grunt_bowercopy.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        // bug-workaround - long $npm_package_buildCustomOrg\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.npmtest_grunt_bowercopy.rollup.js'] =\n            local.assetsDict['/assets.npmtest_grunt_bowercopy.rollup.js'] ||\n            local.fs.readFileSync(\n                local.npmtest_grunt_bowercopy.__dirname + '/lib.npmtest_grunt_bowercopy.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        /* jslint-ignore-end */\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-grunt-bowercopy/node_modules/grunt-bowercopy/Gruntfile.js":"/*\n * grunt-bowercopy\n *\n * Copyright (c) 2014 Timmy Willison\n * Licensed under the MIT license.\n */\n\n'use strict';\n\nmodule.exports = function (grunt) {\n\t// Load all npm grunt tasks\n\trequire('load-grunt-tasks')(grunt);\n\tvar bumpFiles = ['package.json', 'bower.json'];\n\n\tgrunt.initConfig({\n\t\tbump: {\n\t\t\toptions: {\n\t\t\t\t// The bower.json file is private,\n\t\t\t\t// but we still update the version\n\t\t\t\tfiles: bumpFiles,\n\t\t\t\tcommitFiles: bumpFiles,\n\t\t\t\tcommitMessage: 'Release %VERSION%',\n\t\t\t\tpushTo: 'origin',\n\t\t\t\ttagName: '%VERSION%',\n\t\t\t\tpush: false\n\t\t\t}\n\t\t},\n\t\tjshint: {\n\t\t\tall: [\n\t\t\t\t'Gruntfile.js',\n\t\t\t\t'tasks/*.js',\n\t\t\t\t'<%= nodeunit.tests %>'\n\t\t\t],\n\t\t\toptions: {\n\t\t\t\tjshintrc: '.jshintrc'\n\t\t\t}\n\t\t},\n\n\t\tjsonlint: {\n\t\t\tall: [\n\t\t\t\t'*.json'\n\t\t\t]\n\t\t},\n\n\t\t// Configuration to be run (and then tested)\n\t\tbowercopy: {\n\t\t\toptions: {\n\t\t\t\tclean: true,\n\t\t\t\treport: false,\n\t\t\t\tignore: ['jquery-1.x']\n\t\t\t},\n\t\t\tdefault_options: {\n\t\t\t\tfiles: {\n\t\t\t\t\t'tmp/js/libs/jquery.js': 'jquery/dist/jquery.js',\n\t\t\t\t\t'tmp/js/plugins/jquery.panzoom.js': 'jquery.panzoom/dist/jquery.panzoom.js'\n\t\t\t\t}\n\t\t\t},\n\t\t\tprefix_options: {\n\t\t\t\toptions: {\n\t\t\t\t\tsrcPrefix: 'bower_modules',\n\t\t\t\t\tdestPrefix: 'tmp/js'\n\t\t\t\t},\n\t\t\t\tsrc: 'backbone'\n\t\t\t},\n\t\t\tprocess: {\n\t\t\t\toptions: {\n\t\t\t\t\tdestPrefix: 'tmp/js/jquery-ui',\n\t\t\t\t\tcopyOptions: {\n\t\t\t\t\t\tprocess: function(content) {\n\t\t\t\t\t\t\tvar version = grunt.file.readJSON('bower.json').devDependencies['jquery-ui'].split('#')[1];\n\t\t\t\t\t\t\treturn content.replace(/@VERSION/g, version);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\tfiles: {\n\t\t\t\t\t'jquery.ui.core.js': 'jquery-ui/ui/jquery.ui.core.js',\n\t\t\t\t\t'jquery.ui.widget.js': 'jquery-ui/ui/jquery.ui.widget.js'\n\t\t\t\t}\n\t\t\t},\n\t\t\timages: {\n\t\t\t\toptions: {\n\t\t\t\t\tsrcPrefix: 'bower_modules/chosen',\n\t\t\t\t\tdestPrefix: 'tmp/images/chosen'\n\t\t\t\t},\n\t\t\t\t// Test source arrays\n\t\t\t\tsrc: ['chosen-sprite.png', 'chosen-sprite@2x.png']\n\t\t\t},\n\t\t\tglob: {\n\t\t\t\toptions: {\n\t\t\t\t\tsrcPrefix: 'bower_modules/lodash/dist',\n\t\t\t\t\tdestPrefix: 'tmp/js/libs/lodash'\n\t\t\t\t},\n\t\t\t\t// When using glob for source files,\n\t\t\t\t// the destination will always be used as a FOLDER\n\t\t\t\t// in which to place the matching files\n\t\t\t\tsrc: ['!**/*.min.js']\n\t\t\t},\n\t\t\tdest_folder: {\n\t\t\t\tsrc: 'lodash/dist/lodash.js',\n\t\t\t\tdest: 'tmp/js/libs/lodash_folder'\n\t\t\t},\n\t\t\t// Main pragma\n\t\t\tmain: {\n\t\t\t\tsrc: 'jquery.minlight:main',\n\t\t\t\tdest: 'tmp/js/plugins/'\n\t\t\t},\n\t\t\t// Main pragma with complicated destPrefix\n\t\t\tmain_with_complex_dest_prefix: {\n\t\t\t\toptions: {\n\t\t\t\t\tdestPrefix: 'tmp/js/main_with_complex_dest_prefix'\n\t\t\t\t},\n\t\t\t\tsrc: 'angular:main',\n\t\t\t\tdest: 'angular'\n\t\t\t},\n\t\t\t// Main pragma with no dest (so bowercopy uses the src as the dest)\n\t\t\tmain_with_no_dest: {\n\t\t\t\toptions: {\n\t\t\t\t\tdestPrefix: 'tmp/js/libs'\n\t\t\t\t},\n\t\t\t\tsrc: 'angular:main'\n\t\t\t}\n\t\t},\n\n\t\t// Before generating any new files, remove any previously-created files\n\t\tclean: {\n\t\t\ttests: [\n\t\t\t\t'tmp'\n\t\t\t]\n\t\t},\n\n\t\t// Unit tests\n\t\tnodeunit: {\n\t\t\ttests: ['test/*_test.js']\n\t\t},\n\n\t\t// Development watch task\n\t\twatch: {\n\t\t\tdev: {\n\t\t\t\tfiles: [\n\t\t\t\t\t'<%= jshint.all %>'\n\t\t\t\t],\n\t\t\t\ttasks: [ 'default' ]\n\t\t\t},\n\t\t\tjson: {\n\t\t\t\tfiles: [\n\t\t\t\t\t'<%= jsonlint.all %>'\n\t\t\t\t],\n\t\t\t\ttasks: [ 'jsonlint' ]\n\t\t\t}\n\t\t}\n\t});\n\n\t// Actually load this plugin's task(s).\n\tgrunt.loadTasks('tasks');\n\n\t// Whenever the \"test\" task is run, first clean the \"tmp\" dir, then run this\n\t// plugin's task(s), then test the result.\n\tgrunt.registerTask('test', [ 'clean', 'bowercopy', 'nodeunit' ]);\n\n\t// By default, lint and run all tests.\n\tgrunt.registerTask('default', [ 'jshint', 'jsonlint', 'test' ]);\n\n};\n","/home/travis/build/npmtest/node-npmtest-grunt-bowercopy/node_modules/grunt-bowercopy/tasks/bowercopy.js":"/*\n * grunt-bowercopy\n *\n * Copyright (c) 2014 Timmy Willison\n * Licensed under the MIT license.\n */\n\nmodule.exports = function (grunt) {\n\t'use strict';\n\n\t// Logging\n\tvar log = grunt.log,\n\t\tverbose = grunt.verbose,\n\t\tfail = grunt.fail;\n\n\t// Utilities\n\tvar _ = require('lodash');\n\n\t// Modules\n\tvar path = require('path'),\n\t\tbower = require('bower'),\n\t\tglob = require('glob'),\n\t\tsep = path.sep;\n\n\t// Get path to bower config file\n\tvar bowerrc = grunt.file.exists('.bowerrc') ? grunt.file.readJSON('.bowerrc') : {},\n\t\tbowerConfigPath = 'bower.json';\n\tif (bowerrc.cwd) {\n\t\tbowerConfigPath = path.join(bowerrc.cwd, bowerConfigPath);\n\t}\n\n\t// Get all modules\n\tvar bowerConfig = grunt.file.readJSON(bowerConfigPath);\n\tvar allModules = Object.keys(\n\t\t_.extend({}, bowerConfig.dependencies, bowerConfig.devDependencies)\n\t);\n\tvar unused = allModules.slice(0);\n\n\t// Track number of runs\n\tvar numTargets;\n\tvar numRuns = 0;\n\n\t// Regex\n\tvar rperiod = /\\./;\n\tvar rmain = /^(.+):main$/;\n\n\t/**\n\t * Retrieve the number of targets from the grunt config\n\t * @returns {number|undefined} Returns the number of targets,\n\t *  or undefined if the bowercopy config could not be found\n\t */\n\tfunction getNumTargets() {\n\t\tif (numTargets) {\n\t\t\treturn numTargets;\n\t\t}\n\t\tvar targets = grunt.config('bowercopy');\n\t\tif (targets) {\n\t\t\tdelete targets.options;\n\t\t\tnumTargets = Object.keys(targets).length;\n\t\t}\n\t\treturn numTargets;\n\t}\n\n\t/**\n\t * Convert from grunt to a cleaner format\n\t * @param {Array} files\n\t */\n\tfunction convert(files) {\n\t\tvar converted = [];\n\t\tfiles.forEach(function(file) {\n\t\t\t// We need originals as the destinations may not yet exist\n\t\t\tfile = file.orig;\n\t\t\tvar dest = file.dest;\n\n\t\t\t// Use destination for source if no source is available\n\t\t\tif (!file.src.length) {\n\t\t\t\tconverted.push({\n\t\t\t\t\tsrc: dest,\n\t\t\t\t\tdest: dest\n\t\t\t\t});\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tfile.src.forEach(function(source) {\n\t\t\t\tconverted.push({\n\t\t\t\t\tsrc: source,\n\t\t\t\t\tdest: dest\n\t\t\t\t});\n\t\t\t});\n\t\t});\n\t\treturn converted;\n\t}\n\n\t/**\n\t * Filter out all of the modules represented in the filesSrc array\n\t * @param {Array} modules\n\t * @param {Array} files\n\t * @param {Object} options\n\t */\n\tfunction filterRepresented(modules, files, options) {\n\t\treturn _.filter(modules, function(module) {\n\t\t\tif (options.ignore.indexOf(module) > -1) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\treturn !_.some(files, function(file) {\n\t\t\t\t// Look for the module name somewhere in the source path\n\t\t\t\treturn path.join(sep, options.srcPrefix, file.src.replace(rmain, '$1'), sep)\n\t\t\t\t\t.indexOf(sep + module + sep) > -1;\n\t\t\t});\n\t\t});\n\t}\n\n\t/**\n\t * Ensure all bower dependencies are accounted for\n\t * @param {Array} files Files property from the task\n\t * @param {Object} options\n\t * @returns {boolean} Returns whether all dependencies are accounted for\n\t */\n\tfunction ensure(files, options) {\n\t\t// Update the global array of represented modules\n\t\tunused = filterRepresented(unused, files, options);\n\n\t\tverbose.writeln('Unrepresented modules list currently at ', unused);\n\n\t\t// Only print message when all targets have been run\n\t\tif (++numRuns === getNumTargets()) {\n\t\t\tif (unused.length) {\n\t\t\t\tif (options.clean) {\n\t\t\t\t\tlog.error('Could not clean directory. Some bower components are not configured: ', unused);\n\t\t\t\t} else if (options.report) {\n\t\t\t\t\tlog.writeln('Some bower components are not configured: ', unused);\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\t// Remove the bower_components directory as it's no longer needed\n\t\t\t\tif (options.clean) {\n\t\t\t\t\tgrunt.file.delete(options.srcPrefix);\n\t\t\t\t\tlog.ok('Bower directory cleaned');\n\t\t\t\t}\n\t\t\t\tif (options.report) {\n\t\t\t\t\tlog.ok('All modules accounted for');\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * Convert an array of files sources to our format\n\t * @param {Array} files\n\t * @param {Object} options\n\t * @param {string} [dest] A folder destination for all of these sources\n\t */\n\tfunction convertMatches(files, options, dest) {\n\t\treturn files.map(function(source) {\n\t\t\treturn {\n\t\t\t\tsrc: source,\n\t\t\t\tdest: path.join(\n\t\t\t\t\t// Build a destination from the new source if no dest\n\t\t\t\t\t// was specified\n\t\t\t\t\tdest != null ?\n\t\t\t\t\t\tdest :\n\t\t\t\t\t\tpath.dirname(source).replace(options.srcPrefix + sep, ''),\n\t\t\t\t\tpath.basename(source)\n\t\t\t\t)\n\t\t\t};\n\t\t});\n\t}\n\n\t/**\n\t * Get the main files for a particular package\n\t * @param {string} src\n\t * @param {Object} options\n\t * @param {string} dest\n\t * @returns {Array} Returns an array of file locations from the main property\n\t */\n\tfunction getMain(src, options, dest) {\n\t\tvar meta = grunt.file.readJSON(path.join(src, '.bower.json'));\n\t\tif (!meta.main) {\n\t\t\tfail.fatal('No main property specified by ' + path.normalize(src.replace(options.srcPrefix, '')));\n\t\t}\n\t\tvar files = typeof meta.main === 'string' ? [meta.main] : meta.main;\n\t\treturn files.map(function(source) {\n\t\t\treturn {\n\t\t\t\tsrc: path.join(src, source),\n\t\t\t\tdest: dest\n\t\t\t};\n\t\t});\n\t}\n\n\t/**\n\t * Copy over specified component files from the bower directory\n\t *  files format: [{ src: '', dest: '' }, ...]\n\t * @param {Array} files\n\t * @param {Object} options\n\t * @returns {boolean} Returns whether anything was copied for the list of files\n\t */\n\tfunction copy(files, options) {\n\t\tvar copied = false;\n\t\tfiles.forEach(function(file) {\n\t\t\t// Normalize input\n\t\t\tvar src = path.normalize(file.src);\n\t\t\t// Use source for destination if no destination is available\n\t\t\t// This is done here so globbing can use the original dest\n\t\t\tvar dest = path.normalize(file.dest || src);\n\n\t\t\t// Add source prefix if not already added\n\t\t\tif (src.indexOf(options.srcPrefix) !== 0) {\n\t\t\t\tsrc = path.join(options.srcPrefix, src);\n\t\t\t}\n\n\t\t\t// Add dest prefix if not already added\n\t\t\tif (dest.indexOf(options.destPrefix) !== 0) {\n\t\t\t\tdest = path.join(options.destPrefix, dest);\n\t\t\t}\n\n\t\t\t// Copy main files if :main is specified\n\t\t\tvar main = rmain.exec(src);\n\t\t\tif (main) {\n\t\t\t\t//Trim :main from dest strings\n\t\t\t\t//(required if the user did not also provide an explicit dest)\n\t\t\t\tvar temp = rmain.exec(dest);\n\t\t\t\tif (temp) {\n\t\t\t\t\tdest = temp[1];\n\t\t\t\t}\n\n\t\t\t\tcopied = copy(getMain(main[1], options, dest), options) || copied;\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t// Copy folders\n\t\t\tif (grunt.file.isDir(src)) {\n\t\t\t\tgrunt.file.recurse(src, function(abspath, rootdir, subdir, filename) {\n\t\t\t\t\tcopied = true;\n\t\t\t\t\tgrunt.file.copy(\n\t\t\t\t\t\tabspath,\n\t\t\t\t\t\tpath.join(dest, subdir || '', filename),\n\t\t\t\t\t\toptions.copyOptions\n\t\t\t\t\t);\n\t\t\t\t});\n\t\t\t\tlog.writeln(src + ' -> ' + dest);\n\t\t\t// Copy files\n\t\t\t} else if (grunt.file.exists(src)) {\n\t\t\t\tcopied = true;\n\t\t\t\tif (!rperiod.test(path.basename(dest))) {\n\t\t\t\t\tdest = path.join(dest, path.basename(src));\n\t\t\t\t}\n\t\t\t\tgrunt.file.copy(src, dest, options.copyOptions);\n\t\t\t\tlog.writeln(src + ' -> ' + dest);\n\t\t\t// Glob\n\t\t\t} else {\n\t\t\t\tvar matches = glob.sync(file.src, { cwd: options.srcPrefix });\n\t\t\t\tif (matches.length) {\n\t\t\t\t\tmatches = convertMatches(matches, options, file.dest);\n\t\t\t\t\tcopied = copy(matches, options) || copied;\n\t\t\t\t} else {\n\t\t\t\t\tfail.warn(src + ' was not found');\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\t\treturn copied;\n\t}\n\n\t/**\n\t * Top-level copying run\n\t *  files format is Grunt's default:\n\t *  [{ orig: { src: '', dest: '' }, src: '', dest: '' }, ...]\n\t *  convert to copy()'s format before calling copy()\n\t * @param {Array} files\n\t * @param {Object} options\n\t */\n\tvar run = function(files, options) {\n\t\t// Normalize paths\n\t\toptions.srcPrefix = path.normalize(options.srcPrefix);\n\t\toptions.destPrefix = path.normalize(options.destPrefix);\n\n\t\tverbose.writeln('Using srcPrefix: ' + options.srcPrefix);\n\t\tverbose.writeln('Using destPrefix: ' + options.destPrefix);\n\n\t\t// Build the file list\n\t\tfiles = convert(files);\n\n\t\t// Copy files\n\t\tif (!copy(files, options)) {\n\t\t\tfail.warn('Nothing was copied for the \"' + this.target + '\" target');\n\t\t}\n\n\t\t// Report if any dependencies have not been copied\n\t\tensure(files, options);\n\t};\n\n\tgrunt.registerMultiTask(\n\t\t'bowercopy',\n\t\t[\n\t\t\t'Copy only the needed files from bower components',\n\t\t\t'over to their specified file locations'\n\t\t].join(' '),\n\t\tfunction bowercopy() {\n\t\t\tvar self = this;\n\t\t\tvar files = this.files;\n\t\t\t\n\t\t\tvar srcPrefix = '';\n\t\t\tif (bower.config.directory && grunt.file.isPathAbsolute(bower.config.directory)) {\n\t\t\t\tsrcPrefix = bower.config.directory;\n\t\t\t}\n\t\t\telse {\n\t\t\t\tsrcPrefix = path.join(bower.config.cwd, bower.config.directory);\n\t\t\t}\n\n\t\t\t// Options\n\t\t\tvar options = this.options({\n\t\t\t\tsrcPrefix: srcPrefix,\n\t\t\t\tdestPrefix: '',\n\t\t\t\tignore: [],\n\t\t\t\treport: true,\n\t\t\t\trunBower: true,\n\t\t\t\tclean: false,\n\t\t\t\tcopyOptions: {}\n\t\t\t});\n\n\t\t\t// Back-compat. Non-camelcase\n\t\t\tif (options.runBower || options.runbower) {\n\t\t\t\t// Run `bower install`\n\t\t\t\tvar done = this.async();\n\n\t\t\t\tbower.commands.install().on('log', function(result) {\n\t\t\t\t\tlog.writeln(['bower', result.id.cyan, result.message].join(' '));\n\t\t\t\t}).on('error', function(code) {\n\t\t\t\t\tfail.fatal(code);\n\t\t\t\t}).on('end', function() {\n\t\t\t\t\trun.call(self, files, options);\n\t\t\t\t\tdone();\n\t\t\t\t});\n\t\t\t} else {\n\t\t\t\trun.call(self, files, options);\n\t\t\t}\n\t\t}\n\t);\n};\n"}